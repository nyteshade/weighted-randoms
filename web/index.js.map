{"version":3,"sources":["asArray.js","random.js","item.js","index.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","Object","defineProperty","exports","value","provideGetter","asArray","reverseNumericSort","numericSort","isNumber","Number","isNaN","parseFloat","isFinite","a","b","Error","left","right","apply","arguments","SortOptions","ASCENDING","DESCENDING","object","direction","length","undefined","finiteKeys","keys","filter","key","map","num","sort","proxy","Proxy","get","t","p","r","Reflect","result","Array","from","to","as","force","contents","target","eval","_default","_item2","require","_asArray","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","TypeError","toString","call","_arr","_n","_d","_e","_s","_i","next","done","push","err","isArray","isNativeReflectConstruct","construct","sham","Date","e","_construct","Parent","args","Class","Constructor","instance","Function","bind","_setPrototypeOf","o","setPrototypeOf","__proto__","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","iter","arr2","_classCallCheck","_defineProperties","props","descriptor","enumerable","configurable","writable","_createClass","protoProps","staticProps","Random","weightIfFirstAndFinite","_this$constructor","_len","list","_key","standardWeight","DEF_STD_WEIGHT","concat","normalizeArgs","newStandardWeight","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","item","tags","includes","STD_WEIGHT","weight","_len2","items","_key2","withWeight","asc","GEN_RANGE","one","index","Math","random","size","count","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","test","set","reweighStandardItems","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_len3","_key3","Item","_len4","_key4","sides","repeat","dropLowest","individualValues","dice","range","results","some","splice","reduce","prev","cur","defaultWeight","rand","_len5","_key5","add","weighing","addRange","_len6","_key6","_len7","_key7","_len8","objects","_key8","_len9","_key9","val","_len10","_key10","_len11","_key11","hasOwnProperty","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_item","property","receiver","usingItem","itemClass","name","GEN_RANGE_VALS","symbol","exec","slice","module","_random","_defineProperty","assign","indexOf"],"mappings":"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","file":"index.js","sourceRoot":"../dist","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.provideGetter = provideGetter;\nexports.asArray = asArray;\nexports[\"default\"] = exports.reverseNumericSort = exports.numericSort = exports.isNumber = void 0;\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * If the value supplied is actually a number, basically finite values that\n * can be parsed as floats and are not `NaN` will cause this function to\n * return true\n *\n * @param {mixed} value any value that should be tested for numberhood\n *\n * @return {Boolean} true if the value is not `NaN` and can be parsed as\n * a float\n */\nvar isNumber = function isNumber(value) {\n  return !Number.isNaN(parseFloat(value)) && isFinite(value);\n};\n/**\n * The `sort` method on `Array` instances sorts alphabetically rather than\n * numerically. Can be a problem when we specifically wish to sort by\n * numbers. This method does so with a deliberate soft equals for when\n * checking if `a` and `b` are equal. The soft equal is to allow for cases\n * where `5 == new Number(5)`.\n *\n * This function sorts the numeric keys in ascending order.\n *\n * @param {Number} a the left component to compare\n * @param {Number} b the right component to compare\n *\n * @return {Number} -1 on if `a` is less than `b`, 0 if they are equal and\n * 1 if `a` > `b`.\n *\n * @throws an error if both a and b are not finite values.\n */\n\n\nexports.isNumber = isNumber;\n\nvar numericSort = function numericSort(a, b) {\n  if (!isNumber(a) || !isNumber(b)) {\n    throw new Error(\"numericSort should only be used on numbers\");\n  }\n\n  var left = Number(a);\n  var right = Number(b);\n\n  if (left < right) {\n    return -1;\n  }\n\n  if (left == right) {\n    return 0;\n  } // double equals are deliberate\n\n\n  if (left > right) {\n    return 1;\n  }\n};\n/**\n * This function wraps numericSort in a function that swaps the\n * direction of the default numeric sorting routine, i.e. sorts\n * the supplied numbers in descending order.\n *\n * @param {Array<number|Number>} args a left value and right value\n * typically, subsequent parameters are ignored by `Array.sort()`\n * @return {number} -1, 0, or 1 as is expected for a sort routine\n */\n\n\nexports.numericSort = numericSort;\n\nvar reverseNumericSort = function reverseNumericSort() {\n  return -1 * numericSort.apply(void 0, arguments);\n};\n/**\n * A constant used to define the various options that can be passed\n * to `asArray()` in order to determine how to sort the numeric keys\n * of the supplied array.\n */\n\n\nexports.reverseNumericSort = reverseNumericSort;\nvar SortOptions = {\n  ASCENDING: 1,\n  DESCENDING: -1\n};\n/**\n * This function takes an object that has numeric keys and from that\n * object, in order, creates a normally index'ed array. So given an\n * object such as:\n * ```\n * let object = { '-23': 'c', 5: 'a', 123: 't' }\n * ```\n *\n * You can invoke `asArray()` and get the following\n *\n * ```\n * asArray(object) // [ 'c', 'a', 't' ]\n * ```\n *\n * Calling asArray() does not mutate the object supplied. Rather a\n * Proxy instance is created to wrap it and allow for the conversion to\n * a bonafide array.\n *\n * @param {Object} object any JavaScript object that can be iterated over\n * that contains at least a property that is a finite value (i.e. number)\n * @param {number} direction if `SortOptions.ASCENDING` or 1 is supplied,\n * which is the default, keys with a lower numeric value will be earlier\n * in the generated array. If `SortOptions.DESCENDING` or -1 is supplied,\n * the opposite will occur.\n * @return an actual array instance with all previous finite values\n * appearing in numerical order in the returned array.\n */\n\nfunction asArray(object) {\n  var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SortOptions.ASCENDING;\n  var finiteKeys = Object.keys(object).filter(function (key) {\n    return isFinite(key);\n  }).map(function (num) {\n    return Number(num);\n  });\n  finiteKeys.sort(SortOptions.ASCENDING == direction ? numericSort : reverseNumericSort);\n  var proxy = new Proxy(object, {\n    get: function get(t, p, r) {\n      if (_typeof(p) === 'symbol') {\n        return Reflect.get(t, p, r);\n      }\n\n      if (p === 'length') {\n        return finiteKeys.length;\n      }\n\n      if (isFinite(p) && p >= 0 && p < finiteKeys.length) {\n        var key = finiteKeys[p];\n        var result = t[p] || t[key];\n        return result;\n      } else {\n        return Reflect.get(t, p, r);\n      }\n    }\n  });\n  return Array.from(proxy);\n}\n/**\n * Adds a `asArray` getter to the object in question. If the object\n * supplied is a function or class, its instances will bear the new\n * getter property. If the supplied object does not have a `prototype`\n * property, then the geter is applied directly to the object supplied\n *\n * @method provideGetter\n *\n * @param {Function|Object} to see above; the value to receive a new\n * `asArray` getter\n * @param {string} [as='asArray'] defaulting to the value `asArray`, the\n * name of the injected getter can be supplied by the caller.\n * @param {boolean} force if true, no autodetection of function or class\n * takes place and the resulting getter is blindly applied to the target\n */\n\n\nfunction provideGetter(to) {\n  var as = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'asArray';\n  var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var contents = arguments.length > 3 ? arguments[3] : undefined;\n  var target = to; // Set proper defaults\n\n  contents = contents || '(arguments[0])';\n\n  if (!force && (to === null || to === void 0 ? void 0 : to.prototype)) {\n    target = to.prototype;\n    contents = '(this)';\n  }\n\n  Object.defineProperty(target, as, {\n    get: function get() {\n      return asArray(eval(contents));\n    }\n  });\n}\n/** Export each function separately */\n\n\n/** Export the primary function as the default behavior */\nvar _default = asArray;\nexports[\"default\"] = _default;","\"use strict\";\n\nvar _item2 = require(\"./item\");\n\nvar _asArray = require(\"./asArray\");\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Random =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Creates a new instance of Random which can be used to generate a random\n   * selection from the choices it is aware of. Each choice can be weighted\n   * differently than its peers.\n   *\n   * @param  {...any} list\n   */\n  function Random(weightIfFirstAndFinite) {\n    var _this$constructor;\n\n    for (var _len = arguments.length, list = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      list[_key - 1] = arguments[_key];\n    }\n\n    _classCallCheck(this, Random);\n\n    this.list = [];\n\n    if ((0, _asArray.isNumber)(weightIfFirstAndFinite)) {\n      this.standardWeight = Number(weightIfFirstAndFinite) || DEF_STD_WEIGHT;\n    } else {\n      this.standardWeight = DEF_STD_WEIGHT;\n\n      if (weightIfFirstAndFinite !== undefined && weightIfFirstAndFinite !== null) {\n        list = [weightIfFirstAndFinite].concat(list);\n      }\n    }\n\n    this.list = (_this$constructor = this.constructor).normalizeArgs.apply(_this$constructor, [this.standardWeight].concat(_toConsumableArray(list)));\n  }\n  /**\n   * When items are supplied without a specified weight, this is the\n   * weight applied to them when added to the internal list. This getter\n   * retrieves the current value for this instance.\n   *\n   * @return {Number} the current default weight, or 1.0 if unchanged\n   */\n\n\n  _createClass(Random, [{\n    key: \"reweighStandardItems\",\n\n    /**\n     * Items supplied to the Random set without a weight will be set at a\n     * standard default weight. These items are also tagged as being set thus\n     * for easier identification. This method allows an easy way to reweigh\n     * those items with an alternate standard weight after the fact. If\n     * standardWeight has been set directly or via `newStandardWeight` the\n     * weights will be recalculated.\n     *\n     * @param {Number} newStandardWeight an optional new weight to apply to this\n     * Random instance for all new weights for items added\n     */\n    value: function reweighStandardItems() {\n      var newStandardWeight = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (newStandardWeight) {\n        this.standardWeight = newStandardWeight;\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var item = _step.value;\n\n          if (item.tags && Array.isArray(item.tags) && item.tags.includes(STD_WEIGHT)) {\n            item.weight = this.standardWeight;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n    /**\n     * A way to append further items to the internal set of possibilities\n     * generated by this Random set. `this` will be returned for inlining.\n     *\n     * @param  {...any} items either a comma separated list of new items or\n     * any of the other accepted variations to append to the Random set.\n     * @return {Random} `this` is returned to allow for appending as an\n     * inline operation\n     */\n\n  }, {\n    key: \"add\",\n    value: function add() {\n      for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        items[_key2] = arguments[_key2];\n      }\n\n      var list = Random.normalizeArgs.apply(Random, [this.standardWeight].concat(items));\n      this.list = this.list.concat(list);\n      return this;\n    }\n    /**\n     * Adds a range of numbers as Random item choices to the set for\n     * picking. The number range can be from large to small or small\n     * to large; it makes no difference. Each item generated in this\n     * range of numbers will be tagged with a `GEN_RANGE` symbol for\n     * identification.\n     *\n     * @param {Number} from starting number of range\n     * @param {Number} to ending number of range\n     * @param {Number} withWeight an optional weight to use instead of the\n     * standardWeight from this `Random` instance\n     *\n     * @return {Random} the `this` value for inline chaining\n     *\n     * @throws an error if `from` or `to` are not actually numbers\n     */\n\n  }, {\n    key: \"addRange\",\n    value: function addRange() {\n      var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n      var withWeight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      if (!(0, _asArray.isNumber)(from) || !(0, _asArray.isNumber)(to)) {\n        throw new Error('Number ranges must be numeric');\n      }\n\n      var Class = this.constructor;\n      var asc = Number(from) < Number(to);\n      var tags = [GEN_RANGE(from, to)];\n\n      if (withWeight === null) {\n        withWeight = this.standardWeight;\n        tags.push(STD_WEIGHT);\n      }\n\n      for (var i = from; asc && i <= to || !asc && i >= to; asc ? i++ : i--) {\n        this.list.push(Class.item(i, withWeight, tags));\n      }\n\n      return this;\n    }\n    /**\n     * Synonymous with one(); deprecated; remove before launch\n     */\n\n  }, {\n    key: \"generate\",\n    value: function generate() {\n      return this.one();\n    }\n    /**\n     * Randomly select a value from the internal list, taking into account\n     * any weights when generating the random occurrence.\n     *\n     * @return {mixed} the value of the randomly, possibly randomly weighted,\n     * generated item. If the item's `value` property is a function, the\n     * result of that function is returned instead.\n     */\n\n  }, {\n    key: \"one\",\n    value: function one() {\n      var index = Math.random() * this.size;\n      var count = 0;\n\n      var toString = function toString(obj) {\n        return Object.prototype.toString.apply(obj);\n      };\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.list[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var item = _step2.value;\n\n          if (index < item.weight + count) {\n            if (/\\[object Function\\]/.test(toString(item.value))) {\n              return item.value();\n            }\n\n            return item.value;\n          }\n\n          count += item.weight;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n            _iterator2[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Same as `one()` but executes the function `count` number of times and\n     * returns the results in an array.\n     *\n     * @param {Number} count the number of items to generate. Defaults to 3\n     *\n     * @return {Array<mixed>} an array of items generated through subsequent\n     * calls to `.one()`\n     */\n\n  }, {\n    key: \"some\",\n    value: function some() {\n      var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;\n      var items = [];\n\n      for (var i = 0; i < count; i++) {\n        items.push(this.one());\n      }\n\n      return items;\n    }\n    /**\n     * Creates a new Random item entry with default values for `weight`, an\n     * empty array for `tags` and a `value` of whatever you wish to wrap. If\n     * `value` is a `function`, it will be executed whenever the value is\n     * used by `Random` instances.\n     *\n     * As a form of validation, if a Random.item instance is passed for value\n     * it will simply be returned as long as `force` is `false`\n     *\n     * @param {Mixed} value the value to be used for this `Random` item entry;\n     * if the value is a `Random` item entry it will only be wrapped if `force`\n     * is `true`.\n     * @param {Number} weight by default this is one, or the default standard\n     * weight used by the system.\n     */\n\n  }, {\n    key: \"standardWeight\",\n    get: function get() {\n      return this[STD_WEIGHT];\n    }\n    /**\n     * When items are supplied without a specified weight, this is the\n     * weight applied to them when added to the internal list. This setter\n     * applies a new value for this instance.\n     *\n     * @param {Number} value the current default weight, or 1.0 if unchanged\n     */\n    ,\n    set: function set(value) {\n      if ((0, _asArray.isNumber)(value)) {\n        this[STD_WEIGHT] = Number(value);\n        this.reweighStandardItems();\n      }\n    }\n    /**\n     * The size property determines the total weight of all the possibilities\n     * within the list. Each item has a weight and this value is the sum of all\n     * the items' individual weights combined.\n     *\n     * @return {Number} total weight of all choices\n     */\n\n  }, {\n    key: \"size\",\n    get: function get() {\n      var size = 0;\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.list[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var item = _step3.value;\n          size += item.weight;\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3[\"return\"] != null) {\n            _iterator3[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      return size;\n    }\n  }], [{\n    key: \"item\",\n    value: function item() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      return _construct(_item2.Item, args);\n    }\n    /**\n     * Shortcut method that is identical to `new Random(...args).one()`\n     *\n     * @param  {...any} args the comma separated list of items to choose from;\n     * all items will be weighted evenly.\n     */\n\n  }, {\n    key: \"from\",\n    value: function from() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      return _construct(Random, args).one();\n    }\n    /**\n     * Simulates the rolling of dice. A die, or dice if plural, have a given\n     * number of sides. The most common real world dice are six sided. The\n     * `count` value indicates the number of said dice that should be \"rolled\"\n     * and added together in order. A collection of rolls can be indicated\n     * if `repeat` is a number greater than one.\n     *\n     * Two completely optional twists are also available. First if `dropLowest`\n     * is true, the lowest number in a set is dropped before summing or\n     * returning. Second, if `individualValues` is true then rather than summing\n     * the results of the rolls per set, an array with each die roll will be\n     * returned instead; `dropLowest` still functions as expected if individual\n     * values are requested.\n     *\n     * @param {Number} count the number of times each die is rolled in a set\n     * @param {Number} sides the number of sides on the die, defaults to 6\n     * @param {Number} repeat how many sets to create, defaults to 1\n     * @param {Boolean} dropLowest true if the lowest value is dropped one time\n     * @param {Boolean} individualValues if true, defaults to false, then rather\n     * than summing the values, each element of the returned array will be an\n     * array of individual rolls.\n     * @return {Array<Number>|Array<Array<Number>>} an array of numbers will be\n     * returned, for a total count equal to repeat. If a six-sided die is\n     * \"rolled\" three times and this process is repeated six times, then an\n     * array of six numbers between 3 and 18 will be returned. If\n     * `individualValues` is true, rather than summed values, an array of array\n     * of numbers will be returned instead. `dropLowest` still works as expected\n     * in this case\n     */\n\n  }, {\n    key: \"roll\",\n    value: function roll() {\n      var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var sides = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;\n      var repeat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var dropLowest = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var individualValues = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var dice = Random.range(1, sides, 1000);\n      var results = [];\n\n      for (var i = 0; i < repeat; i++) {\n        var set = dice.some(count);\n        set.sort(_asArray.numericSort);\n\n        if (dropLowest) {\n          set.splice(0, 1);\n        }\n\n        results.push(individualValues ? set : set.reduce(function (prev, cur) {\n          return prev + cur;\n        }, 0));\n      }\n\n      return results;\n    }\n    /**\n     * A shortcut for creating a new `Random` instance, setting the weight\n     * and optionally adding in values at the newly set weight.\n     *\n     * @param {Number} defaultWeight a new value to use as a standard weight\n     * in a newly created Random() instance.\n     * @param  {...any} args any number of arguments to add to the Random\n     * instance with the newly calculated weight.\n     *\n     * @return a new instance of Random with the specified weight and\n     * optionally any values added at the new weight.\n     */\n\n  }, {\n    key: \"ofWeight\",\n    value: function ofWeight() {\n      var defaultWeight = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEF_STD_WEIGHT;\n      var rand = new Random();\n      rand.standardWeight = defaultWeight;\n\n      for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        args[_key5 - 1] = arguments[_key5];\n      }\n\n      rand.add.apply(rand, args);\n      return rand;\n    }\n    /**\n     * Given a number range, choose a number randomly from that list. The\n     * ranges are inclusive. So from of 1 and to of 6 will generate only\n     * values of the set [1,2,3,4,5,6]. Numbers below `from` and above\n     * `to` will not be selected.\n     *\n     * @param {Number} from the starting value of the range of numbers\n     * @param {Number} to the ending value of the range of numbers\n     * @param {Number} weighing the weight of each items by default\n     *\n     * @return {Random} the instance of `Random` prefilled with items whose\n     * values are numbers from the specified range.\n     */\n\n  }, {\n    key: \"range\",\n    value: function range() {\n      var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n      var weighing = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEF_STD_WEIGHT;\n      var rand = new Random().addRange(from, to, weighing);\n      return rand;\n    }\n    /**\n     * Choose any one item from the list of values supplied to the function.\n     * Each value supplied to the function will be appropriately wrapped using\n     * a call to `Random.item(value)` thereby giving it a value, weight and\n     * tags list.\n     *\n     * @param  {...any} args a comma separated list of values to choose from\n     *\n     * @return {mixed} the `value` property value or return result of a\n     * function if `value` is a function of the item randomly chosen from the\n     * list\n     */\n\n  }, {\n    key: \"one\",\n    value: function one() {\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      return _construct(Random, args).one();\n    }\n    /**\n     * Same as the static version of `Random.one()` but returning `count`\n     * number of instances in an array.\n     *\n     * @param {Number} count number of random selections to make\n     * @param  {...any} args the items from which to make a selection.\n     *\n     * @return {Array<mixed>} an array of items chosen from the selected\n     * list.\n     */\n\n  }, {\n    key: \"some\",\n    value: function some() {\n      var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;\n\n      for (var _len7 = arguments.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n        args[_key7 - 1] = arguments[_key7];\n      }\n\n      return _construct(Random, args).some(count);\n    }\n    /**\n     * Rather than choosing a value from the supplied list, for each value\n     * supplied a random property name from that object will instead be\n     * returned.\n     *\n     * @param {Number} count number of random selections to make\n     * @param  {...any} objects objects from which to randomly choose a\n     * property value name.\n     *\n     * @return {Array<string>} an array of property names chosen randomly\n     * from the list of objects supplied.\n     */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n      for (var _len8 = arguments.length, objects = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n        objects[_key8 - 1] = arguments[_key8];\n      }\n\n      var bag = _construct(Random, objects);\n\n      var items = bag.some(count).map(function (item) {\n        return Random.one(Object.keys(item || {}));\n      });\n      return items;\n    }\n    /**\n     * Rather than choosing a value from the supplied list, for each value\n     * supplied a random property value from that object will instead be\n     * returned.\n     *\n     * @param {Number} count number of random selections to make\n     * @param  {...any} objects objects from which to randomly choose a\n     * property value.\n     *\n     * @return {Array<string>} an array of property values chosen randomly\n     * from the list of objects supplied.\n     */\n\n  }, {\n    key: \"values\",\n    value: function values() {\n      var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n      for (var _len9 = arguments.length, objects = new Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {\n        objects[_key9 - 1] = arguments[_key9];\n      }\n\n      var bag = _construct(Random, objects);\n\n      var items = bag.some(count).map(function (item) {\n        var key = Random.one(Object.keys(item || {}));\n        var val = item[key];\n        return val;\n      });\n      return items;\n    }\n    /**\n     * Rather than choosing a value from the supplied list, for each value\n     * supplied a random property name and value from that object will instead\n     * be returned.\n     *\n     * @param {Number} count number of random selections to make\n     * @param  {...any} objects objects from which to randomly choose a\n     * property name and value.\n     *\n     * @return {Array<string>} an array of property names and values chosen\n     * randomly from the list of objects supplied.\n     */\n\n  }, {\n    key: \"entries\",\n    value: function entries() {\n      var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n      for (var _len10 = arguments.length, objects = new Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {\n        objects[_key10 - 1] = arguments[_key10];\n      }\n\n      var bag = _construct(Random, objects);\n\n      var items = bag.some(count).map(function (item) {\n        var key = Random.one(Object.keys(item || {}));\n        var val = item[key];\n        return [key, val];\n      });\n      return items;\n    }\n    /**\n     * Some effort has gone into parsing the supplied values to be smart about\n     * how to process them. If *only one item* is supplied, some custom logic is\n     * considered.\n     *\n     * If the item is an array, then its values are used instead\n     * If the item has a `length` property then\n     *   If the item has a `asArray` getter then use its resulting contents\n     *   If the item is not a string, use the contents of calling Array.from()\n     *\n     * Once all logic has been considered, wrap each item up as a Random.item()\n     * result; excepting only if the supplied item has both a value and weight\n     * property. If the object has a 'value' and 'weight' property but no 'tags'\n     * property, rather than modifying the original, a proxy of the item with\n     * a handler that returns an empty array for tags is added.\n     *\n     * @param {Number} defaultWeight the default weight to apply to arguments\n     * processed using this method.\n     * @param  {...any} args any value that should be considered to be added\n     * to the `Random` set for selection.\n     *\n     * @return {Array<mixed>} returns an array of properly vetted items for\n     * a Random instance to contain\n     */\n\n  }, {\n    key: \"normalizeArgs\",\n    value: function normalizeArgs(defaultWeight) {\n      for (var _len11 = arguments.length, args = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {\n        args[_key11 - 1] = arguments[_key11];\n      }\n\n      var Class = this;\n      var list = []; // If we are given a single value, it may be more complicated...\n\n      if (args.length === 1) {\n        // If the first and only argument is an array, then the list\n        // should be its contents\n        if (Array.isArray(args[0])) {\n          args = _toConsumableArray(args[0]);\n        } // If the object appears to known its own length...\n        else if (args[0].hasOwnProperty('length')) {\n            // ...if that object has an .asArray property...\n            if (args[0].hasOwnProperty('asArray')) {\n              args = args[0].asArray;\n            } else if (typeof args !== 'string') {\n              args = Array.from(args[0]);\n            }\n          }\n      }\n\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = args[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var item = _step4.value;\n\n          if (Array.isArray(item)) {\n            var _item = _slicedToArray(item, 2),\n                value = _item[0],\n                weight = _item[1];\n\n            list.push(Class.item(value, weight));\n          } else if (item.hasOwnProperty('weight') && item.hasOwnProperty('value')) {\n            if (!item.hasOwnProperty('tags')) {\n              list.push(new Proxy(item, {\n                get: function get(target, property, receiver) {\n                  if (property === 'tags') {\n                    return [];\n                  } else {\n                    return Reflect.get(target, property, receiver);\n                  }\n                }\n              }));\n            } else {\n              list.push(item);\n            }\n          } else {\n            list.push(Class.item(item, defaultWeight || DEF_STD_WEIGHT, [STD_WEIGHT]));\n          }\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4[\"return\"] != null) {\n            _iterator4[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      return list;\n    }\n  }, {\n    key: \"usingItem\",\n    value: function usingItem(itemClass) {\n      if (~(itemClass === null || itemClass === void 0 ? void 0 : itemClass.prototype) instanceof _item2.Item) {\n        return Random;\n      }\n\n      return eval(\"(\\n      class Random_\".concat(itemClass.name, \" extends Random {\\n        static item(...args) { return new itemClass(...args) }\\n      }\\n    )\"));\n    }\n  }]);\n\n  return Random;\n}();\n/** Standard default weight value used through code for new items */\n\n\nvar DEF_STD_WEIGHT = new Number(1);\n/** A constant symbol used as a tag for standard weight items */\n\nvar STD_WEIGHT = Symbol('Standard Default Random Item Weight');\n/** A generated symbol applied to addRange(...) items */\n\nvar GEN_RANGE = function GEN_RANGE(from, to) {\n  return Symbol[\"for\"](\"Generated Range Item from \".concat(from, \" to \").concat(to));\n};\n/**\n * Deconstructs a `Symbol` generated using `GEN_RANGE` and returns an\n * array with the `from` and `to` values used to generate the supplied\n * symbol\n *\n * @param {Symbol} symbol a symbol generated using `GEN_RANGE`\n *\n * @return {Array<Number>} an array of two values used in the original\n * call to GEN_RANGE.\n */\n\n\nvar GEN_RANGE_VALS = function GEN_RANGE_VALS(symbol) {\n  return Array.from(/.*(\\b\\d+\\b).*(\\b\\d+\\b)/.exec(symbol.toString())).slice(1);\n};\n\nmodule.exports = {\n  \"default\": Random,\n  Random: Random,\n  isNumber: _asArray.isNumber,\n  numericSort: _asArray.numericSort,\n  STD_WEIGHT: STD_WEIGHT,\n  DEF_STD_WEIGHT: DEF_STD_WEIGHT,\n  GEN_RANGE: GEN_RANGE,\n  GEN_RANGE_VALS: GEN_RANGE_VALS\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Item = void 0;\n\nvar _random = require(\"./random\");\n\nfunction isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar Item =\n/*#__PURE__*/\nfunction () {\n  function Item() {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var weight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _random.DEF_STD_WEIGHT;\n    var tags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var force = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n    _classCallCheck(this, Item);\n\n    _defineProperty(this, \"value\", null);\n\n    _defineProperty(this, \"weight\", _random.DEF_STD_WEIGHT);\n\n    _defineProperty(this, \"tags\", [_random.STD_WEIGHT]);\n\n    if (_typeof(value) === 'object' && typeof value.value !== 'undefined' && typeof value.weight !== 'undefined' && !force) {\n      Object.assign(this, value);\n    }\n\n    if (weight === _random.DEF_STD_WEIGHT && !~tags.indexOf(_random.STD_WEIGHT)) {\n      tags.push(_random.STD_WEIGHT);\n    }\n\n    Object.assign(this, {\n      value: value,\n      weight: weight,\n      tags: tags\n    });\n  }\n  /**\n   * A shortcut method that allows the creation of an instance using the\n   * `.from()` static method. Identical to using `new Item(...)` syntax.\n   *\n   * Examples:\n   *   Item.from('hello')\n   *   Item.from('hello', 50)\n   *\n   * @method from\n   * @param {[type]} args [description]\n   * @return {[type]} [description]\n   */\n\n\n  _createClass(Item, null, [{\n    key: \"from\",\n    value: function from() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _construct(Item, args);\n    }\n    /**\n     * The value property is any type of JavaScript value, if this property\n     * yields a function, the resulting value from the function's execution\n     * is used when employed with `Random` instances.\n     *\n     * @type {mixed}\n     */\n\n  }]);\n\n  return Item;\n}();\n\nexports.Item = Item;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"Item\", {\n  enumerable: true,\n  get: function get() {\n    return _item.Item;\n  }\n});\nObject.defineProperty(exports, \"Random\", {\n  enumerable: true,\n  get: function get() {\n    return _random.Random;\n  }\n});\nObject.defineProperty(exports, \"isNumber\", {\n  enumerable: true,\n  get: function get() {\n    return _random.isNumber;\n  }\n});\nObject.defineProperty(exports, \"numericSort\", {\n  enumerable: true,\n  get: function get() {\n    return _random.numericSort;\n  }\n});\nObject.defineProperty(exports, \"STD_WEIGHT\", {\n  enumerable: true,\n  get: function get() {\n    return _random.STD_WEIGHT;\n  }\n});\nObject.defineProperty(exports, \"DEF_STD_WEIGHT\", {\n  enumerable: true,\n  get: function get() {\n    return _random.DEF_STD_WEIGHT;\n  }\n});\nObject.defineProperty(exports, \"GEN_RANGE\", {\n  enumerable: true,\n  get: function get() {\n    return _random.GEN_RANGE;\n  }\n});\nObject.defineProperty(exports, \"GEN_RANGE_VALS\", {\n  enumerable: true,\n  get: function get() {\n    return _random.GEN_RANGE_VALS;\n  }\n});\n\nvar _item = require(\"./item\");\n\nvar _random = require(\"./random\");"]}